// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
  // Using default output directory
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  password      String?
  role          Role        @default(USER)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Date
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Date
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  posts         Post[]
  memberships   Membership[]

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("sessionToken")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Event model
model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  description String
  content     String
  image       String?  // URL or path to uploaded image
  imageFile   String?  // Path to uploaded file
  imageType   String?  // 'url' or 'file'
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  location    String
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(false)
  categories  String[] @db.ObjectId
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt @db.Date
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])

  @@map("events")
}

// Blog Post model
model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String   @unique
  excerpt    String
  content    String
  coverImage String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Date
  updatedAt  DateTime @updatedAt @db.Date
  authorId   String   @db.ObjectId
  author     User     @relation(fields: [authorId], references: [id])
  categories String[] @db.ObjectId
  tags       String[] @db.ObjectId

  @@map("posts")
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  slug  String @unique
  posts String[] @db.ObjectId

  @@map("categories")
}

model Tag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  slug  String @unique
  posts String[] @db.ObjectId

  @@map("tags")
}

model Membership {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String
  phoneNumber           String
  companyName           String
  companyWebsite        String
  linkedinUrl           String
  currentProfile        String
  designation          String
  industry             String
  fundingStatus        FundingStatus
  fundingAmount        String?       @default("")
  annualTurnover       RevenueRange
  lookingToRaise       Boolean
  currentInvestors     String?       @default("")
  wantsToVolunteer     Boolean
  location             String
  otherLocation        String?       @default("")
  referralSource       String
  otherReferralSource  String?       @default("")
  inviteeDetails       String?       @default("")
  status               MembershipStatus @default(PENDING)
  notes                String?       @default("")
  reviewedById         String?       @default("") @db.ObjectId
  reviewedAt           DateTime?     @default(now()) @db.Date
  createdAt            DateTime      @default(now()) @db.Date
  updatedAt            DateTime      @updatedAt @db.Date
  user                 User?         @relation(fields: [userId], references: [id])
  userId               String?       @db.ObjectId

  @@index([email])
  @@index([status])
  @@index([userId])
  @@map("memberships")
}

enum Role {
  USER
  EDITOR
  ADMIN
  BUILDER
  INVESTOR
  PENDING
  REJECTED
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FundingStatus {
  NOT_APPLICABLE
  IDEA_STAGE
  MVP_STAGE
  BOOTSTRAPPED_NOT_RAISING
  BOOTSTRAP_LOOKING_TO_RAISE
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B_PLUS
}

enum RevenueRange {
  NOT_APPLICABLE
  NO_REVENUE
  ZERO_TO_1K
  ONEK_TO_10K
  TENK_TO_50K
  FIFTYK_TO_100K
  HUNDREDK_TO_1M
  ONE_MILLION_PLUS
}
